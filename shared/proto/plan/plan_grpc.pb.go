// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0--rc1
// source: plan.proto

package plan

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlansService_CreatePin_FullMethodName           = "/plan.PlansService/CreatePin"
	PlansService_GetPinByID_FullMethodName          = "/plan.PlansService/GetPinByID"
	PlansService_GetPinByParticipant_FullMethodName = "/plan.PlansService/GetPinByParticipant"
)

// PlansServiceClient is the client API for PlansService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// User service definition
type PlansServiceClient interface {
	// Create a new user
	CreatePin(ctx context.Context, in *CreatePinRequest, opts ...grpc.CallOption) (*CreatePinResponse, error)
	GetPinByID(ctx context.Context, in *GetPinByIDRequest, opts ...grpc.CallOption) (*GetPinByIDResponse, error)
	GetPinByParticipant(ctx context.Context, in *GetPinByParticipantRequest, opts ...grpc.CallOption) (*GetPinsResponse, error)
}

type plansServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlansServiceClient(cc grpc.ClientConnInterface) PlansServiceClient {
	return &plansServiceClient{cc}
}

func (c *plansServiceClient) CreatePin(ctx context.Context, in *CreatePinRequest, opts ...grpc.CallOption) (*CreatePinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePinResponse)
	err := c.cc.Invoke(ctx, PlansService_CreatePin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plansServiceClient) GetPinByID(ctx context.Context, in *GetPinByIDRequest, opts ...grpc.CallOption) (*GetPinByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPinByIDResponse)
	err := c.cc.Invoke(ctx, PlansService_GetPinByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plansServiceClient) GetPinByParticipant(ctx context.Context, in *GetPinByParticipantRequest, opts ...grpc.CallOption) (*GetPinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPinsResponse)
	err := c.cc.Invoke(ctx, PlansService_GetPinByParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlansServiceServer is the server API for PlansService service.
// All implementations must embed UnimplementedPlansServiceServer
// for forward compatibility.
//
// User service definition
type PlansServiceServer interface {
	// Create a new user
	CreatePin(context.Context, *CreatePinRequest) (*CreatePinResponse, error)
	GetPinByID(context.Context, *GetPinByIDRequest) (*GetPinByIDResponse, error)
	GetPinByParticipant(context.Context, *GetPinByParticipantRequest) (*GetPinsResponse, error)
	mustEmbedUnimplementedPlansServiceServer()
}

// UnimplementedPlansServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlansServiceServer struct{}

func (UnimplementedPlansServiceServer) CreatePin(context.Context, *CreatePinRequest) (*CreatePinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePin not implemented")
}
func (UnimplementedPlansServiceServer) GetPinByID(context.Context, *GetPinByIDRequest) (*GetPinByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPinByID not implemented")
}
func (UnimplementedPlansServiceServer) GetPinByParticipant(context.Context, *GetPinByParticipantRequest) (*GetPinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPinByParticipant not implemented")
}
func (UnimplementedPlansServiceServer) mustEmbedUnimplementedPlansServiceServer() {}
func (UnimplementedPlansServiceServer) testEmbeddedByValue()                      {}

// UnsafePlansServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlansServiceServer will
// result in compilation errors.
type UnsafePlansServiceServer interface {
	mustEmbedUnimplementedPlansServiceServer()
}

func RegisterPlansServiceServer(s grpc.ServiceRegistrar, srv PlansServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlansServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlansService_ServiceDesc, srv)
}

func _PlansService_CreatePin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlansServiceServer).CreatePin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlansService_CreatePin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlansServiceServer).CreatePin(ctx, req.(*CreatePinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlansService_GetPinByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPinByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlansServiceServer).GetPinByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlansService_GetPinByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlansServiceServer).GetPinByID(ctx, req.(*GetPinByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlansService_GetPinByParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPinByParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlansServiceServer).GetPinByParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlansService_GetPinByParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlansServiceServer).GetPinByParticipant(ctx, req.(*GetPinByParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlansService_ServiceDesc is the grpc.ServiceDesc for PlansService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlansService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plan.PlansService",
	HandlerType: (*PlansServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePin",
			Handler:    _PlansService_CreatePin_Handler,
		},
		{
			MethodName: "GetPinByID",
			Handler:    _PlansService_GetPinByID_Handler,
		},
		{
			MethodName: "GetPinByParticipant",
			Handler:    _PlansService_GetPinByParticipant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plan.proto",
}
